{% import "macros.jinja2" as macros %}

<h4>Firmware properties</h4>

<form class="form-horizontal">
    {{ macros.text_input("firmwareName", "Firmware Name", "Firmware name to report (useful for testing firmware detection)") }}
    <br>
    {{ macros.checkbox_input("forceChecksum", "Force checksum", "Whether to force checksums and line number in the communication (like Repetier), if set to true printer will only accept commands that come with linenumber and checksum and throw an error for lines that don't.") }}
    <br>
    {{ macros.number_input("rxBuffer", "RX Buffer", "Size of the simulated RX buffer in bytes, when it's full a send from OctoPrint's side will block") }}
    <br>
    {{ macros.number_input("commandBuffer", "Command Buffer", "Size of the simulated command buffer, number of commands. If full, buffered commands will block until a slot frees up") }}
    <br>
    {{ macros.checkbox_input("supportM112", "Support M112", "Whether to support the M112 command with simulated kill") }}
    <br>
    {{ macros.checkbox_input("echoOnM117", "Echo on M117", "Whether to send messages received via M117 back as \"echo:\" lines") }}
    <br>
    {{ macros.checkbox_input("brokenM29", "Broken M29", "Whether to simulate broken M29 behaviour (missing ok after response)") }}
    <br>
    {{ macros.checkbox_input("supportF", "Support F command", "Whether F is supported as an individual command") }}
    <br>
    {{ macros.checkbox_input("sendBusy", "Send 'busy'", "Send \"busy\" messages if busy processing something") }}
    <br>
    {{ macros.checkbox_input("simulateReset", "Simulate reset", "Simulate a reset on connect") }}
    <br>
    <div class="control-group">
        <label class="control-label" style="padding-right: 10px">M115 Format string</label>
        <div class="controls">
            <textarea class="input-block-level" data-bind="textInput: settingsViewModel.settings.plugins.virtual_printer.m115FormatString">
            </textarea>
            <p class="help-block">Format string for M115 output. Placeholders:<br> <code>firmware_name</code>: The firmware name as defined in firmwareName</p>
        </div>
    </div>
    <br>
    {{ macros.checkbox_input("m115ReportCapabilities", "M115 Report Capabilities", "Whether to include capability report in M115 output") }}
    <br>
    {{ macros.checkbox_input("enable_eeprom", "Enable Virtual EEPROM", "Enable a 'virtual' EEPROM to persist imaginary printer configuration across reboots.") }}
    <br>
    {{ macros.checkbox_input("support_M503", "Support M503", "Makes the printer respond current settings on M503 command") }}
    <br>
    {{ macros.checkbox_input("locked", "Printer locked on startup", "Enable the printer lock on startup") }}
    <br>
    {{ macros.number_input("passcode", "Printer lock passcode", "The passcode to unlock the printer (with M511)") }}
    <div class="control-group">
        <label class="control-label">Reset Lines</label>
        <div class="controls">
            <div class="row-fluid">
                <div class="input-append">
                    <input type="text" style="margin-bottom: 5px;" placeholder="Add a new line..." data-bind="textInput: newResetLine">
                    <button class="btn btn-primary" data-bind="click: addResetLine"><i class="fa fa-plus"></i></button>
                </div>
            </div>
            <!-- ko foreach: resetLines() -->
            <div class="row-fluid">
                <div class="input-append">
                    <input type="text" style="margin-bottom: 5px;" data-bind="value: $rawData">
                    <button class="btn btn-danger" data-bind="click: function() { $parent.deleteResetLine($rawData) }"><i class="fa fa-trash-o"></i></button>
                </div>
            </div>
            <!-- /ko -->
            <p class="help-block">Lines to send on simulated reset</p>
        </div>
    </div>
    <br>
    <div class="control-group">
        <label class="control-label">Prepared Oks</label>
        <div class="controls">
            <div class="row-fluid">
                <div class="input-append">
                    <input type="text" style="margin-bottom: 5px;" placeholder="Add a new entry..." data-bind="textInput: newPreparedOk">
                    <button class="btn btn-primary" data-bind="click: addPreparedOk"><i class="fa fa-plus"></i></button>
                </div>
            </div>
            <!-- ko foreach: preparedOks() -->
            <div class="row-fluid">
                <div class="input-append">
                    <input type="text" style="margin-bottom: 5px;" data-bind="value: $rawData">
                    <button class="btn btn-danger" data-bind="click: function() { $parent.deletePreparedOk($rawData) }"><i class="fa fa-trash-o"></i></button>
                </div>
            </div>
            <!-- /ko -->
            <p class="help-block">Initial set of prepared oks to use instead of regular ok (e.g. to simulate mis-sent oks) when connection is first established.</p>
        </div>
    </div>
    <div class="control-group">
        <label class="control-label">Capability report</label>
        <div class="controls row">
            <table>
                <thead>
                <tr>
                    <th style="width: 60%;">
                        <input style="margin-left: -23px; /*This is a massive hack*/" type="text" data-bind="value: newCapability" placeholder="Add a new line...">
                    </th>
                    <th style="width: 30%"></th>
                    <th style="width: 10%">
                        <button class="btn btn-primary" data-bind="click: addCapability">
                            <i class="fa fa-plus"></i>
                        </button>
                    </th>
                </tr>
                </thead>
                <tbody>
                <!-- ko foreach: capabilities -->
                <tr>
                    <td>
                        <input type="text" data-bind="value: name">
                    </td>
                    <td>
                        Enable: <input type="checkbox" data-bind="checked: value">
                    </td>
                    <td>
                        <button class="btn btn-danger" data-bind="click: function() { $parent.deleteCapability($rawData) }">
                            <i class="fa fa-trash-o"></i>
                        </button>
                    </td>
                </tr>
                <!-- /ko -->
                </tbody>
            </table>
        </div>
    </div>
    <br>
</form>
